/* -*- c++ -*- */
/*
 * Copyright 2004,2010 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <howto_peak_location_cf.h>
#include <gr_io_signature.h>
#include <math.h>
#include <stdio.h>

/*
 * Create a new instance of howto_square_ff and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
howto_peak_location_cf_sptr howto_make_peak_location_cf(int sample_rate, int ninput_samples)
{
  return gnuradio::get_initial_sptr(new howto_peak_location_cf (sample_rate, ninput_samples));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;	// mininum number of input streams
static const int MAX_IN = 1;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
howto_peak_location_cf::howto_peak_location_cf (int sample_rate, int ninput_samples)
  : gr_sync_decimator ("peak_location_cf",
	      gr_make_io_signature (MIN_IN, MAX_IN, sizeof (gr_complex)),
	      gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (float)),
	      ninput_samples),
	      d_sample_rate(sample_rate),
	      d_ninput_samples(ninput_samples)
{
  // nothing else required in this example
}

/*
 * Our virtual destructor.
 */
howto_peak_location_cf::~howto_peak_location_cf ()
{
  // nothing else required in this example
}

int
howto_peak_location_cf::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
  const gr_complex *in = (const gr_complex *) input_items[0];
  float *out = (float *) output_items[0];

  float max, value, f_peak;
  int m_k, pos;
  gr_complex delta, my_const(2.0,0.0);

  for(int k=0;k<noutput_items;k++) {
    f_peak = 0.0;
    max = 0.0;
    m_k = 0;
    delta = gr_complex(0.0,0.0);

    for(int i=0;i<d_ninput_samples;i++) {
        pos = k*d_ninput_samples + i;
	value = abs(in[pos]);
	if(value > max) {
	  max = value;
          m_k = pos;
	}
    }

    if(m_k > 0) {
       delta = (in[m_k+1]-in[m_k-1])/(my_const*in[m_k]-in[m_k-1]-in[m_k+1]);
       f_peak = (m_k - delta.real() - k*d_ninput_samples) * (d_sample_rate/d_ninput_samples);
    }
    
    out[k] = f_peak;
  }

  // Tell runtime system how many output items we produced.
  return noutput_items;
}
